sb<-6.5
sw<-9.2
s<-sqrt(sb**2+sw**2)
s
-3.4*11.26/sqrt(5)
-1.645*11.26/sqrt(5)
-3.4*sqrt(5)/11.26
pnorm(-0.675)
pnorm(0.675)
qnorm(0.95, lower.tail=FALSE)
pnorm(-1)
ppois(9, 17,87)
ppois(9, 17,87, lower.tail=FALSE)
ppois(9, 17.87, lower.tail=FALSE)
ppois(10,17.87,lower.tail=FALSE)
ppois(15,17.87,lower.tail=FALSE)
ppois(17.87,17.87,lower.tail=FALSE)
ppois(17.87,17.87)
ppois(25,17.87)
ppois(25,17.87, lower.tail=FALSE)
1-ppois(10,17.87, lower.tail=FALSE)
pnorm(0.855, lower.tail=FALSE)
pnorm(0.9, lower.tail=FALSE)
qnorm(0.95, lower.tail=FALSE)
qnorm(0.95)
qnorm(0.975)
1.96/12*sqrt(288)
sqrt(288)
1.96/16.97*sqrt(288)
pnorm(1.96)
1-pnorm(1.96)/2
(1-pnorm(1.96))
(1-pnorm(1.96))/2
-3.4/11.26*sqrt(5)
pnorm(-0.675)
(1-pnorm(0.675))/2
pnorm(0.675)
1-0.75
0.25/2
pnorm(0.855)
sqrt(12**2+12**2)
sqrt(288)
(1-pnorm(1.96))/2
1.96/12*sqrt(288)
(1-pnorm(2.77))/2
1-pnorm(1.96)
(1-pnorm(1.96))*2
-3.4*sqrt(5)/11.26
pnorm(-0.675)
(1-pnorm(0.675))
pnrom(-0.675)*2
pnorm(-0.675)*2
pnorm(0.675)
library(swirl)
install.packages("swirl")
library(swirl)
install.packages("swirl")
library(swirl)
swirl()
plot(child ~parent, galton)
plot(jitter(child,4) ~ parent, galton)
regrline <- lm(child  parent, galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
fit <- lm(child ~ parent, galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
rhs - lhs
lhs-rhs
equal(lhs, rhs)
all.equal(lhs, rhs)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- est(ols.slope, ols.ic)
varEst <- est(ols.ic, ols.slope)
info()
play()
?est
??est
nxt()
varEst <- var(est(est(ols.slope, ols.ic)))
varEst <- var(est(galton$parent, ols.slope, ols.ic))
varEst <- var(est(ols.slope, ols.ic))
all.equeal(varChild, varRes+varEst)
all.equal(varChild, varRes+varEst)
efit <- lm(accel ~ mag+dist, attenu)
mean(efit$residuals)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
cor(gpa_nor, gch_nor)
l_nor <- lm(child ~ parent, galton)
l_nor <- lm(gch_nor ~ gph_nor)
l_nor <- lm(gch_nor ~ gpa_nor)
fit <- lm(child ~ parent, galton)
sqrt(sum(fit$residuals**2/n-2))
sqrt(sum(fit$residuals^2)/n-2)
sqrt(sum(fit$residuals^2)/(n-2)
)
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
sTot <- sum((galton$child - mu)^2)
sRes <- devaiance(sum(fit$residuals^2))
sRes <- deviance(sum(fit$residuals^2))
fit
sRes <- deviance(fit)
1-sRes/sTot
summary(fit)$r.squared
cor(galton$child, galton$parent)^2
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent -1, galton)
lm(child ~ parent, galton)
lm(child ~ 1, galton)
View(trees)
fit <- lm(Volume ~ Girth + Height + Constant -1, trees)
trees2 <- eliminate("Girth", trees)
View(trees2)
fit2 <- lm(Volume ~ Height + Constant -1, trees2)
lapply(list(fit,fit2), coef)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit <- lm(y ~ x)
fit
summary(fit)
pnorm(0.975)
qnorm(0.975)
1.96*0.31707+0.7224
-0.7224/0.3107
qnorm(2.325)
qnorm(-2.325)
qnorm(1)
qnorm(1.96)
pnorm(2.325)
1-pnorm(2.325)
[1]*2
2*(1-pnorm(2.325))
2*(1-pnorm(2.325)/2)
summary(fit)
library(mtcars)
mtcars
fit <- lm(mpg~weight, mtcars)
head(mtcars)
fit <- lm(mpg~wt, mtcars)
summary(fit)
summary(fit)$coefficients
sumCoef <- summary(fit)$coefficients
sumCoef
sumCoef[1,1]
fit$df
summary(fit)
sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[2, 2]
x
y
nrows(mtcars)
nrow(mtcars)
x
fit2 <- lm(y~x)
summary(fit2)
?mtcars
??mtcars
fit <- lm(mpg~wt, mtcars)
fit$coefficients
coef <- fit$coefficients
coef[1]+coef[2]*3000
-15996.13-4.202635
coef[1]+coef[2]*3
21.25171-4.202635
21.25171+4.202635
21.25171+6.486308
interval <- sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[2, 2]
coef[1]
coef[1]+coef[2]*0-interval[2]-coef[1]+coef[2]*2000-interval[2]
coef[1]+coef[2]*0+interval[2]-coef[1]+coef[2]*2000+interval[2]
coef[1]+coef[2]*0-interval[2]-(coef[1]+coef[2]*2000+interval[2])
coef[1]+coef[2]*0-interval[2]-(coef[1]+coef[2]*2000-interval[2])
summary(fit)
1.8776/0.5591
0.5591/1.8776
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
lm(y~x)
summary(lm(y~x))
?lm
pt(2.325)
count(x)
length(x)
pt(2.325,7)
2*(1-pt(2.325,7))
mtcars
head(mtcars)
avwt <- mean(mtcars$wt)
coef[1]+coef[2]*avwt
20.09-6.486
coef[1]
library(swirl)
ls()
rm(list=ls())
library(swirl)
swirl
swirl()
lm(Fertility~.,swiss)
all <- lm(Fertility~.,swiss)
summary(all)
summary(lm(Fertility~Agriculture, swiss))
cor(swiss$Education, swiss$Examination)
with(swiss, cor(Agriculture, Education))
cor(swiss$Agriculture, swiss$Education)
makelms()
ec <- swiss$Examination + swiss$Catholic
efit <- lm(Fertility~.+ec, swiss)
efit$coef - all$efit
all$coefficients-efit$coefficients
6
dim(InsectSprays)
head(InsectSprays, 15)
sA
summary(InsectSprays[,2])
sapply(InsectSprays, class())
sapply(InsectSprays, FUN=class)
sapply(InsectSrpays, class)
sapply(InsectSprays, class)
fit <- lm(spary~count, InsectSprays)
fit <- lm(spray~count, InsectSprays)
fit <- lm(count~spray, InsectSrpays)
fit <- lm(count~spray, InsectSprays)
summary(fit)
summary(fit)$coef
est <- summary(fit$coef)[,1]
est <- summary(fit)$coef[,1]
mean(sA)
mean(sB)
nfit <- lm(count~spray-1, InsectSprays)
nfit$coef
summary(nfit)$coef
spray2 <- relevel(InsectSprays$spray, "C")
fit2 <- lm(count~spray, InsectSprays)
fit2 <- lm(count~spray2, InsectSprays)
summary(fit2)$coef
mean(sC)
(fit$coef[2]-fit$coef[3])/1.6011
swirl()
swirl()
fit <- lm(y~x, out2)
plot(fit, which=1)
fitno <- lm(y~x, out2[-1,])
plot(fitno, which=1)
coef(fit)-coef(fitno)
head(dfbeta(fit))
resno <- out2[1,"y"] - predict(fitno, out2[1,])
resno
1-resid(fit)[1]/resno
head(hatvalues(fit))
len(fit)
length(fit)
sigma <- sqrt(fit**2/11)
sigma <- sqrt(deviance(fit)/df.residual(fit))
df.residual(fit)
rstd <- resid(fit)/(sigma * sqrt(1-hatvalues(fit)))
head(cbind(rstd,rstandard(fit)))
plot(fit, which=3)
plot(fit, which=2)
sigma1 <- sqrt(deviance(fitno)/(df.resid(fitno)))
sigma1 <- sqrt(deviance(fitno)/(df.residual(fitno)))
resid(fit[1]/(sigma1 * sqrt(1-hatavalues(fit)[1])))
resid(fit[1]/(sigma1 * sqrt(1-hatvalues(fit)[1])))
sigma1
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
dy <- predict(fitno, out2) - predict(fit,out2)
deviance(dy)/(2*sigma**2)
deviance(dy)/(2*sigma^2)
dy
sum(dy^2)/(2*sigma^2)
plot(fit, which=5)
rgp1()
rgp2()
head(swiss)
mdl <- lm(Fertility~., swiss)
vif(mdl)
mdl2 <- lm(Fertility~.-Examination, swiss)
vif(mdl2)
head(mtcars)
fit <- lm(mpg~wt + cyl, mtcars)
summary(fit)
fit$coefficients[2]
fit$coefficients[3]*-4
-3.19 * -4
-1.5*-4
-1.51*-4
fit2 <- lm(mpg~cyl, mtcars)
summary(fit2)
fit2$coef[2]
fit2$coef[2]*-4
fit3 <- lm(mpg~cyl+wt, mtcars)
summary(fit3)
fit$coef[1]+fit$coef[3]*8-fit$coef[1]-fit$coef[3]*4
fit$coef[1]+fit2$coef[3]*8-fit$coef[1]-fit2$coef[3]*4
fit2$coef[1]+fit2$coef[3]*8-fit2$coef[1]-fit2$coef[3]*4
fit2$coef[1]+fit2$coef[2]*8-fit2$coef[1]-fit2$coef[2]*4
summary(fit)
summary(fit2)
fit <- lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y~x)
dfbetas(fit)
round(dfbetas(fit)[1:5,2], 3)
hatvalues(fit)[1:5]
hatvalues(fit)
plot(y,x)
plot(x,y)
library(mtcars)
head(mtcars)
fit <- lm(mpg~factor(cyl) + wt, mtcars)
fit2 <- lm(mpg~factor(cyl), mtcars)
fit$coefficients
summary(fit)
summary(fit2)
fitx <- lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
summary(fitx)
head(mtcars)
nrow(mtcars)
mtcars
mtcars
?mtcars
pairs(mtcars)
head(mtcars)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
head(segmentationOriginal)
nrow(segmentationOriginal)
training <- segmentationOriginal[Case=="Train",]
training <- segmentationOriginal[segmentationOriginal$Case=="Train",]
testing <- segmentationOriginal[segmentationOriginal$Case=="Test",]
nrow(training)
nrow(testing)
set.seed(125)
names(training)
modFit <- train(Class~., method="rpart", data=training)
test[1,]
testing[1,]
print(modFit$finalModel)
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages("pgmm")
source('~/vifSims.R')
source('~/vifSims.R')
source('~/vifSims.R')
source('~/vifSims.R')
source('~/vifSims.R')
source('~/vifSims.R')
source('~/vifSims.R')
library(pgmm)
data(olive)
olive = olive[,-1]
source('~/vifSims.R')
install.packages("pgmm")
install.packages("C:/Users/Ricard/Downloads/pgmm_1.0.tar.gz", repos = NULL, type = "source")
library(pgmm)
data(olive)
olive = olive[,-1]
head(olive)
modFit <- train(Area~., method="rpart",data=olive)
library(caret)
modFit <- train(Area~., method="rpart",data=olive)
newdata = as.data.frame(t(colMeans(olive)))
?t
predict(modFit,newdata=newdata)
newdata
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
head(trainSA)
modFit <- train(chd~age+alcohol+obesity+tobacco+typea+ldl, method="glm", family="binomial")
modFit <- train(chd~age+alcohol+obesity+tobacco+typea+ldl, method="glm", family="binomial", data=trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(testSA, predict(modFit, newdata=testSA))
missClass(testSA$chd, predict(modFit, newdata=testSA))
missClass(trainSA$chd, predict(modFit, newdata=trainSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
head(vowel.train)
set.seed(33833)
class(vowel.train)
class(vowel.train$y)
vowel.train$y <- as.factor(vowel.train$y)
class(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
modFit <- train(y~., data=vowel.train, method="rf")
modFit <- train(y~., data=vowel.train, method="rf")
?varlmp
varlmp(modFit)
library(caret)
caret::varlmp
caret:varlmp
?caret::varlmp
??varlmp
varImp(modFit)
modFit <- train(y~., data=vowel.train, method="rf", prox=True)
modFit <- train(y~., data=vowel.train, method="rf", prox=TRUE)
varImp(modFit)
varImp.randomForest(modFit)
varImp.RandomForest(modFit)
head(olive)
library(quantmod)
library(plyr)
symbols <- c("MSFT","C","VIA/B","MMM")
#1
l_ply(symbols, function(sym) try(getSymbols(sym)))
symbols <- symbols[symbols %in% ls()]
#2
sym.list <- llply(symbols, get)
#3
data <- xts()
for(i in seq_along(symbols)) {
symbol <- symbols[i]
data <- merge(data, get(symbol)[,paste(symbol, "Close", sep=".")])
}
install.packages("quantmod")
library(quantmod)
library(plyr)
symbols <- c("MSFT","C","VIA/B","MMM")
#1
l_ply(symbols, function(sym) try(getSymbols(sym)))
symbols <- symbols[symbols %in% ls()]
#2
sym.list <- llply(symbols, get)
#3
data <- xts()
for(i in seq_along(symbols)) {
symbol <- symbols[i]
data <- merge(data, get(symbol)[,paste(symbol, "Close", sep=".")])
}
data
setwd("C:/correlation_matrix")
deployApp()
library(shinyApps)
library(shinyApp)
library(shinyapps)
deployApp()
deployApp()
deployApp()
deployApp()
deployApp()
deployApp()
returns <- getReturns(c("GDL","GDX"), freq="week")
library(stockPortfolio)
returns <- getReturns(c("GDL","GDX"), freq="week")
head(returns)
summary(returns)
head(returns$R)
cov <- cov(returns$R, method="kendall")
cov
corr <- cov2cor(cov)
corr
?cov2cor
deployApp()
deployApp()
deployApp()
deployApp()
library(devtools)
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library(slidify)
setwd("C:/Users/Ricard/Google Drive/Github/Coursera-Dev_Products-Matrix_Correlation_App")
author("Matrix_Correlation_Pitch")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
